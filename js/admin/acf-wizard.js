!function(){var t;function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){for(var a=0;a<e.length;a++){var r=e[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,n(r.key),r)}}function r(t,e,a){return(e=n(e))in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function n(t){var a=function(t,a){if("object"!==e(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==e(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===e(a)?a:String(a)}function i(t,e){return s(t,o(t,e,"get"))}function o(t,e,a){if(!e.has(t))throw new TypeError("attempted to "+a+" private field on non-instance");return e.get(t)}function c(t,e,a){return function(t,e){if(t!==e)throw new TypeError("Private static access of wrong provenance")}(t,e),function(t,e){if(void 0===t)throw new TypeError("attempted to get private static field before its declaration")}(a),s(t,a)}function s(t,e){return e.get?e.get.call(t):e.value}var u=new WeakMap,d=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e,a){!function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t,e),e.set(t,a)}(this,u,{writable:!0,value:void 0}),r(this,"parent",void 0),r(this,"stepper",void 0),r(this,"steps",[]);var a,n,i,s=c(t,t,l).length;this.parent=e,this.stepper=document.createElement("div"),this.parent.setAttribute("data-wizard-container",s),this.stepper.classList.add("acf-wizard-stepper"),this.parent.prepend(this.stepper),a=this,n=u,i=new MutationObserver((function(t,e){t.forEach((function(t){var e=t.target.getAttribute("data-key"),a=t.target.matches(".acf-hidden");document.querySelectorAll('[data-wizard-action="goto"][data-wizard-target="'.concat(e,'"]')).forEach((function(t){t.disabled=a}))}))})),function(t,e,a){if(e.set)e.set.call(t,a);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=a}}(a,o(a,n,"set"),i),c(t,t,l)[s]=this}var e,n,s;return e=t,s=[{key:"factory",value:function(e){var a=Object.values(c(t,t,l)).find((function(t){return e===t.parent}));return void 0===a&&(a=new t(e)),a}},{key:"findByElement",value:function(e){var a=parseInt(e.closest("[data-wizard-container]").getAttribute("data-wizard-container"));return c(t,t,l)[a]}},{key:"navigate",value:function(e){var a=t.findByElement(e),r=e.getAttribute("data-wizard-action");"goto"===r?a.goto(e.getAttribute("data-wizard-target")):"forward"===r?a.currentIndex+=parseInt(e.getAttribute("data-wizard-steps")):"back"===r&&(a.currentIndex-=parseInt(e.getAttribute("data-wizard-steps")))}}],(n=[{key:"current",get:function(){return this.parent.querySelectorAll(".acf-field-wizard-step").forEach((function(t){return idx=!!t.matches(".active")&&t})),!1}},{key:"currentNavItem",get:function(){var t=this,e=!1;try{this.parent.querySelectorAll(".acf-field-wizard-step").forEach((function(a){var r=t.stepper.querySelector('[data-wizard-target="'.concat(a.getAttribute("data-key"),'"]'));if(r&&(e=r),a.matches(".active"))throw""}))}catch(a){}return e}},{key:"currentIndex",get:function(){var t=-1;return this.parent.querySelectorAll(".acf-field-wizard-step").forEach((function(e,a){return t=e.matches(".active")?a:t})),t},set:function(t){var e=this;this.parent.querySelectorAll(".acf-field-wizard-step").forEach((function(a,r){t===r&&e.goto(a.getAttribute("data-key"))}))}},{key:"destructor",value:function(){i(this,u).disconnect()}},{key:"add",value:function(t){var e=t.getAttribute("data-wizard-nav");if("none"===e)return!1;var a=document.createElement("button"),r=t.getAttribute("data-key");return a.type="button",a.setAttribute("data-wizard-action","goto"),a.setAttribute("data-wizard-target",r),e.includes("name")&&(a.innerHTML='<span class="acf-wizard-nav-item-name">'.concat(t.querySelector(".acf-label").textContent,"</span>")),a.classList.add("acf-wizard-nav-item"),e.includes("number")&&a.classList.add("-numbered"),this.stepper.append(a),t.matches('.acf-field-wizard-step[data-conditions]:not([data-wizard-nav="none"])')&&i(this,u).observe(t,{attributes:!0}),this.currentIndex<0&&this.goto(r),this}},{key:"goto",value:function(t){this.parent.querySelector(':scope > [data-key="'.concat(t,'"]')).classList.add("active"),this.parent.querySelectorAll(':scope > .acf-field-wizard-step:not([data-key="'.concat(t,'"])')).forEach((function(t){t.classList.remove("active")}));var e=this.currentNavItem;if(e){var a=e.getAttribute("data-wizard-target");return e.classList.add("active"),this.stepper.querySelectorAll('[data-wizard-target]:not([data-wizard-target="'.concat(a,'"])')).forEach((function(t){t.classList.remove("active")})),this}}}])&&a(e.prototype,n),s&&a(e,s),Object.defineProperty(e,"prototype",{writable:!1}),t}(),l={writable:!0,value:[]};document.addEventListener("click",(function(t){var e=t.target.closest("[data-wizard-action]");e&&d.navigate(e)}));var f;(f=t=d)&&f.__esModule;var p=acf.Field.extend({type:"wizard_step",initialize:function(){this.$el.hasClass("acf-wizard")}});acf.registerFieldType(p);var v,h=(v=t)&&v.__esModule?v:{default:v},y=acf.Field.extend({type:"wizard_step",initialize:function(){this.$el.hasClass("acf-wizard")||(this.$el.addClass("acf-wizard"),this.wizard=h.default.factory(this.$el.parent().get(0)),this.wizard.add(this.$el.get(0)))}});acf.registerFieldType(y)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,